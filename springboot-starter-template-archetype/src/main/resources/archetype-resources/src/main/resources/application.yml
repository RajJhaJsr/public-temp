server:
  port: 8080

spring:
  application:
    name: stp-fss-mvp
  threads:
    virtual:
      enabled: true
  cloud:
    function:
      definition: processOrder;
    stream:
      bindings:
        processOrder-out-0: # optional
          destination: stm/fss/orders/captured/v1
          #binder: solace-broker
        processOrder-in-0:
          destination: stm/fss/orders/captured/v1    # Just a name of subscription-topic for queue
          group: stm-fss-order-processing-group
          #binder: solace-broker
          consumer:
            concurrency: 1
            max-attempts: 1  # Disable Spring Cloud Stream retry, handle manually
#        # Retry queue consumer
#        processRetry-in-0:
#          destination: orders.retry.queue  # Just a name of subscription-topic for queue
#          group: order-retry-group
#          #binder: solace-broker
#          consumer:
#            concurrency: 1
#            #max-attempts: 1
#        # DLQ producer
#        dlq-out-0:
#          destination: orders.dlq
#          #binder: solace-broker
#        # Retry queue producer
#        retry-out-0:
#          destination: orders.retry.queue
#          #binder: solace-broker

      solace:
        bindings:
          #          processOrder-out-0:  # optional
          #            producer:
          #              destinationType: TOPIC #Default is Topic for out/producer
          processOrder-in-0:
            consumer:
              queueNameExpression: "'stm.fss.orders.processing.v1.queue'"
              #addDestinationAsSubscriptionToQueue: false  #Defult true adds the Destination ( orders/topic) as a subscription to queue
              #provisionDurableQueue: false
              #endpointType: topic_endpoint  #Default is queue for in/consumer, When set to topic_endpoint, then instead of provisioning a queue for the consumer groupâ€™s endpoint, the binder will instead provision a topic endpoint.
            ## durable topic endpoint is similar to queue, where queue can subscribe to multiple topics and allows multiple consumers to consume messages independently, topic_endpoint is bound to one topic
#          processRetry-in-0:
#            consumer:
#              queueNameExpression: "'orders.retry.queue'"
#              #provisionDurableQueue: false
#          retry-out-0:
#            producer:
#              time-to-live: 30000  # 30 seconds TTL for retry messages

      binders:
        solace-broker: # just a name for the binder
          type: solace
          environment:
            solace:
              java:
                host: tcp://localhost:55555
                msgVpn: default
                clientUsername: admin
                clientPassword: admin
                connectRetries: -1
                reconnectRetries: -1
    #                apiProperties:
    #                  ssl_trust_store: <path_to_trust_store>
    #                  ssl_trust_store_password: <trust_store_password>
    #                  ssl_validate_certificate: true




  r2dbc:
    url: r2dbc:postgresql://localhost:5432/stm
    username: postgres
    password: changeme
    pool:
      initial-size: 10
      max-size: 20
      max-idle-time: 30m
      validation-query: SELECT 1

  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

logging:
  level:
    com.hsbc.stm: DEBUG
    org.springframework.r2dbc: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html


app:
  client:
    http:
      services:
        serviceA:
          url: "https://jsonplaceholder.typicode.com/posts/1"
          token: ${TOKEN:default-token-if-not-set}

